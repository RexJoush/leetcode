package y2022.m02February.day504NextPermutation;

/**
 * @author Rex Joush
 * @time 2022.02.23
 */

/*
    下一个排列
    https://leetcode-cn.com/problems/next-permutation/

    整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。
    例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
    整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。
    例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
    类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
    而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
    给你一个整数数组 nums ，找出 nums 的下一个排列。
    必须 原地 修改，只允许使用额外常数空间。

    示例 1：
        输入：nums = [1,2,3]
        输出：[1,3,2]
    示例 2：
        输入：nums = [3,2,1]
        输出：[1,2,3]
    示例 3：
        输入：nums = [1,1,5]
        输出：[1,5,1]

    提示：
        1 <= nums.length <= 100
        0 <= nums[i] <= 100

 */
public class NextPermutation {

    /*
        考虑到，下一个排列总是比当前排列要大，但仅大一次重排，除非已经是最大的排列
        因此，我们将左边的一个 较小数字 ，与右边的 较大数字 进行交换，能使得当前排列变大，而得到较大排列
        同时，较小数应尽量靠右，较大数应尽量靠左，交换完成后，较大数右边的数需要按照升序重新排列，这样可以保证使得变大的幅度尽可能小
        具体的：
            首先，从后向前找到第一个顺序对，(i, i+1)，且满足 a[i] < a[i+1] 这样较小数 a[i] 找到，此时在区间 [i+1, n) 必是降序序列
            此时，在区间 [i+1, n) 内找到第一个比 a[i] 大的值，即 a[j] 为较大数
            最后，交换 a[i], a[j]，此时将区间 [i + 1, n) 变为升序即可
        结果：
            0 ms, 100.00%
            41.4 MB, 46.74%
     */
    public void nextPermutation(int[] nums) {
        int n = nums.length;

        int i = n - 2;
        // 从前往后直接找到满足的 较小数字
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        // 未出界
        if (i >= 0) {
            // 寻找较大数
            int j = n - 1;
            while (j >= 0 && nums[j] >= nums[i]) {
                j--;
            }
            // 交换两个值
            swap(nums, i, j);
        }
        // 交换 [i+1, n) 区间的值
        while (++i < --n) {
            swap(nums, i, n);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
