package y2022.m02February.day489GrayCode;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Rex Joush
 * @time 2022.02.08
 */

/*
    格雷编码
    https://leetcode-cn.com/problems/gray-code/

    n 位格雷码序列 是一个由 2n 个整数组成的序列，其中：
    每个整数都在范围 [0, 2n - 1] 内（含 0 和 2n - 1）
    第一个整数是 0
    一个整数在序列中出现 不超过一次
    每对 相邻 整数的二进制表示 恰好一位不同 ，且
    第一个 和 最后一个 整数的二进制表示 恰好一位不同
    给你一个整数 n ，返回任一有效的 n 位格雷码序列 。

    示例 1：
        输入：n = 2
        输出：[0,1,3,2]
        解释：
        [0,1,3,2] 的二进制表示是 [00,01,11,10] 。
        - 00 和 01 有一位不同
        - 01 和 11 有一位不同
        - 11 和 10 有一位不同
        - 10 和 00 有一位不同
        [0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。
        - 00 和 10 有一位不同
        - 10 和 11 有一位不同
        - 11 和 01 有一位不同
        - 01 和 00 有一位不同
    示例 2：
        输入：n = 1
        输出：[0,1]

    提示：
        1 <= n <= 16

 */
public class GrayCode {

    /*
        异或编码
        不管n为几，当前n的格雷码中的前一半始终为n - 1的全部，所以这时我们可以忽略n在格雷码中的影响
        这时我们将格雷码编号：
            [000, 001, 011, 010, 110, 111, 101, 100 ...]
              0,   1,   2,   3 ,   4,   5,  6,   7,  ...
        这里的 0 ~ 7... 转换为二进制后我们成为二进制码，
        比如我们要求解 5 对应的格雷码，这里 5 对应的二进制码就是 0101（5的二进制）
              0  0  1  0  1
               \/ \/ \/ \/
                0  1  1  1
            \/ 指的是相邻两位异或操作
        即某个数字的二进制表示，相邻两位异或的结果为当前数字对应的格雷码
        结果：
            5 ms, 72.70%
            46.6 MB, 13.31%
     */
    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList<>();

        // 此处，1 << n 等于 2^n
        for (int i = 0; i < (1 << n); i++) {
            // 当前数字右移一位，与自己异或，即可得到格雷码
            result.add(i ^ (i >> 1));
        }
        return result;
    }
}
